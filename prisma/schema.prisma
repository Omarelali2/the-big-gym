generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Package {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  features     String[]
  monthlyPrice Float    @default(0)
  annualPrice  Float    @default(0)

  currency    String   @default("USD")
  isPayment   Boolean  @default(false)
  discount    Float?
  offerActive Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}



model WorkoutType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  coaches     Coach[]
  muscle      Muscle[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      String[]
}

model Muscle {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  description String?
  imageUrl    String?
  iconUrl     String?
  workoutId   String?
  workout     WorkoutType? @relation(fields: [workoutId], references: [id])


  exercises Exercise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coach {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique @default("temp@example.com")
  imageUrl   String?
  password   String  @default("changeme")
  speciality String  @default("N/A")
  degree     String  @default("N/A")
  experience String  @default("N/A")
  about      String  @default("N/A")
  fees       String  @default("0")
  address    Json    @default("{}")
  date       Int     @default(0)
  available  Boolean @default(true)

  slotsBooked Json         @default("{}")
  workoutId   String?
  workout     WorkoutType? @relation(fields: [workoutId], references: [id])
  chats       Chat[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Exercise {
  id          String   @id @default(cuid())
  title       String
  description String?
  images      String[]
  videoUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  comments    ExerciseComment[]
  ratings     ExerciseRating[]
  favoritedBy User[]            @relation("UserFavorites")

  difficulty String   @default("Beginner")
  duration   Int?
  reps       Int?
  sets       Int?
  category   String?
  tags       String[]
  equipment  String?

  muscleId String?
  muscle   Muscle? @relation(fields: [muscleId], references: [id])

}

model ExerciseComment {
  id         String   @id @default(cuid())
  content    String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
}
model User {
  id                 String       @id @default(uuid())
  clerkUserId        String       @unique
  email              String       @unique
  username           String?      @unique 
  name               String?
  imageUrl           String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  subscriptionActive Boolean      @default(false)
  selectedWorkoutId  String?
  selectedWorkout    WorkoutType? @relation(fields: [selectedWorkoutId], references: [id])
  chats              Chat[]
  isAdmin            Boolean      @default(false)
  phoneNumber        String?
  address            String?
  bio                String?
  selectedPackageId  Int? // ðŸ”¹ FK Ù„Ù„Ø¨Ø§Ù‚Ø© Ø§Ù„Ù„ÙŠ Ø§Ø®ØªØ§Ø±Ù‡Ø§ Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù…
  selectedPackage    Package?     @relation(fields: [selectedPackageId], references: [id])

  height          Float? // cm
  weight          Float? // kg
  bodyFat         Float? // %
  muscleMass      Float? // kg
  activityLevel   String? // "Sedentary" | "Light" | "Moderate" | "Active" | "VeryActive"
  fitnessGoal     String? // "LoseWeight" | "GainMuscle" | "Maintain" | "Endurance"
  experienceLevel String?

  exerciseComments  ExerciseComment[]
  exerciseRatings   ExerciseRating[]
  favoriteExercises Exercise[]        @relation("UserFavorites")

  // ðŸ”¹ Ù…Ø±ØªØ¨Ø· Ø¨Ø§Ù„Ù€ daily calories
  dailyCalories DailyCalories[]
}

model ExerciseRating {
  id         String   @id @default(cuid())
  rating     Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
}

model DailyCalories {
  id     String   @id @default(uuid())
  userId String
  user   User     @relation(fields: [userId], references: [id])
  date   DateTime @default(now())
  intake Int      @default(0)
  burned Int      @default(0)

  @@unique([userId, date])
}



model Message {
  id        String   @id @default(cuid())
  chatId    String
  sender    String
  text      String?
  imageUrl  String?
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  coachId   String
  user      User      @relation(fields: [userId], references: [id])
  coach     Coach     @relation(fields: [coachId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}
